name: Create Release

on:
  workflow_dispatch:

jobs:
  release:
    name: Create New Release
    runs-on: ubuntu-latest
    outputs:
      release_tag_name: ${{ steps.create_release.outputs.tag_name }}
      release_id: ${{ steps.create_release.outputs.id }}
      mapper_commit_hash: ${{ steps.get_latest_commit.outputs.mapper_commit_hash }}
    steps:
    - name: Checkout code
      uses: actions/checkout@v2
    
    - name: Get current timestamp
      run: echo "CURRENT_TIMESTAMP=$(date +'%Y.%m.%d.%H%M%S')" >> $GITHUB_ENV

    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ env.CURRENT_TIMESTAMP }}
        release_name: Release ${{ env.CURRENT_TIMESTAMP }}
        draft: false
        prerelease: false

    - name: Get latest commit hash from gamehook-io/mappers
      id: get_latest_commit
      uses: actions/github-script@v6
      with:
        github-token: ${{secrets.GITHUB_TOKEN}}
        script: |
          const repo = { owner: 'gamehook-io', repo: 'mappers' };

          const response = await github.rest.repos.getCommit({
            owner: repo.owner,
            repo: repo.repo,
            ref: 'heads/main'
          });

          core.setOutput('mapper_commit_hash', response.data.sha);

  build-and-upload:
    name: Build and Upload Assets
    strategy:
      fail-fast: false
      matrix:
        kind: ['windows', 'linux', 'macos']
        include:
          - kind: windows
            os: ['windows-latest']
            target: win-x64
          - kind: linux
            os: ['ubuntu-latest']
            target: linux-x64
          - kind: macos
            os: ['macos-latest']
            target: osx-x64
    runs-on: ${{ matrix.os }}
    needs:
      - release
    steps:
      - name: Use Release Outputs
        shell: bash
        run: |
          echo "Release Tag Name: ${{ needs.release.outputs.release_tag_name }}"
          echo "Release ID: ${{ needs.release.outputs.release_id }}"
          echo "Mapper Commit Hash: ${{ needs.release.outputs.mapper_commit_hash }}"

      - name: Checkout
        uses: actions/checkout@v1

      - name: Update MAPPER_VERSION in appsettings.json
        shell: bash
        run: |
          MAPPER_COMMIT=${{ needs.release.outputs.mapper_commit_hash }}
          
          if [ -z "$MAPPER_COMMIT" ]; then
            echo "MAPPER_COMMIT is NULL."
            exit 1
          fi

          jq --arg MAPPER_COMMIT "$MAPPER_COMMIT" '.MAPPER_VERSION = $MAPPER_COMMIT' ./src/GameHook.WebAPI/appsettings.json > ./src/GameHook.WebAPI/appsettings.json.tmp
          mv ./src/GameHook.WebAPI/appsettings.json.tmp ./src/GameHook.WebAPI/appsettings.json

      - name: Setup .NET Core SDK
        uses: actions/setup-dotnet@v1.7.2
        with:
          dotnet-version: 8.0.x

      - name: Build Project
        shell: bash
        run: |
          # Variables
          commithash=$(git describe --long --always --dirty --exclude=* --abbrev=8)
          tag=$(git describe --tags --abbrev=0)
          release_name="GameHook-${{ matrix.target }}-$tag"
          echo "commithash is $commithash"
          echo "tag is $tag"
          echo "release_name is $release_name"

          echo "Building GameHook.WebAPI"
          echo "dotnet publish src/GameHook.WebAPI/GameHook.WebAPI.csproj -r ${{ matrix.target }} -c Release -o deploy /property:PublishSingleFile=true /property:Version=$tag /property:InformationalVersion=$tag+$commithash"
          dotnet publish src/GameHook.WebAPI/GameHook.WebAPI.csproj -r ${{ matrix.target }} -c Release -o deploy /property:PublishSingleFile=true /property:Version=$tag /property:InformationalVersion=$tag+$commithash

          if [ "${{ matrix.kind }}" == "windows" ]; then
            echo "Building GameHook.WPF"

            echo "dotnet publish src/GameHook.WPF/GameHook.WPF.csproj -r ${{ matrix.target }} -c Release -o deploy /property:PublishSingleFile=true /property:Version=$tag /property:InformationalVersion=$tag+$commithash"
            dotnet publish src/GameHook.WPF/GameHook.WPF.csproj -r ${{ matrix.target }} -c Release -o deploy /property:PublishSingleFile=true /property:Version=$tag /property:InformationalVersion=$tag+$commithash
          fi

          # Rename binaries.
          if [ "${{ matrix.kind }}" == "windows" ]; then
            cp ./deploy/GameHook.WPF.exe ./deploy/GameHook.exe
            cp ./deploy/GameHook.WebAPI.exe ./deploy/GameHook.Console.exe

            7z a -tzip "${release_name}.zip" "./deploy/GameHook.exe"
            7z a -tzip "${release_name}-console-only.zip" "./deploy/GameHook.Console.exe"
          else
            chmod +x ./deploy/GameHook.WebAPI
            cp ./deploy/GameHook.WebAPI ./deploy/GameHook

            cd ./deploy/ && tar czvf "./../${release_name}.tar.gz" GameHook && cd -
          fi

      - name: Release
        uses: softprops/action-gh-release@v1
        with:
          files: |
            ./GameHook-*.zip
            ./GameHook-*.tar.gz
            ./deploy/GameHook.exe
  
  notify:
    name: Notify Users
    runs-on: ubuntu-latest
    needs:
      - build-and-upload
    steps:
      - name: Discord Notification
        env:
          DISCORD_WEBHOOK: ${{ secrets.DISCORD_APP_UPDATES_WEBHOOK }}
        uses: Ilshidur/action-discord@master
        with:
          args: 'A new version of GameHook has been released. Version ${{ needs.release.outputs.release_tag_name }} is now available. <https://github.com/gamehook-io/gamehook/releases/tag/${{ needs.release.outputs.release_tag_name }}>'