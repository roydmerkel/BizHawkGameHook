name: Create Release

on:
  workflow_dispatch:

jobs:
  create-release:
    runs-on: ubuntu-latest
    steps:
      - name: Get Current Date
        id: date
        run: echo "::set-output name=date::$(date +'%Y.%m.%d.%H%M%S')"

      - name: Define Release Name
        id: define_release_name
        run: |
          commithash=$(git describe --long --always --dirty --exclude=* --abbrev=8)
          tag=$(git describe --tags --abbrev=0)
          release_name="GameHook-${{ matrix.target }}-$tag"
          echo "::set-output name=release_name::$release_name"
          echo "Release name: $release_name"

      - name: Get latest commit hash of @gamehook-io/mappers
        id: get-latest-commit
        run: |
          LATEST_COMMIT=$(curl -s https://api.github.com/repos/gamehook-io/mappers/commits/main | jq -r '.sha')
          echo "Latest commit hash of mappers repository is $LATEST_COMMIT"
          echo "::set-output name=mapper_commit_hash::$LATEST_COMMIT"

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.date.outputs.date }}
          release_name: Release ${{ steps.date.outputs.date }}
          draft: false
          prerelease: true

      - name: Set Release ID
        id: get_release_id
        run: echo "::set-output name=release_id::${{ steps.create_release.outputs.id }}"
  
  upload-binaries:
    name: Build and Release
    needs: create-release
    strategy:
      fail-fast: false
      matrix:
        kind: ['windows', 'linux', 'macos']
        include:
          - kind: windows
            os: ['windows-latest']
            target: win-x64
          - kind: linux
            os: ['ubuntu-latest']
            target: linux-x64
          - kind: macos
            os: ['macos-latest']
            target: osx-x64
    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout
        uses: actions/checkout@v1

      - name: Update MAPPER_VERSION in appsettings.json
        run: |
          jq --arg hash "${{ needs.create-release.outputs.mapper_commit_hash }}" '.MAPPER_VERSION = $hash' src/GameHook.WebAPI/appsettings.json > temp.json
          mv temp.json src/GameHook.WebAPI/appsettings.json

      - name: Setup .NET Core SDK
        uses: actions/setup-dotnet@v1.7.2
        with:
          dotnet-version: 8.0.x

      - name: Build and Upload Packages
        shell: bash
        run: |
          # Variables
          commithash=$(git describe --long --always --dirty --exclude=* --abbrev=8)
          tag=$(git describe --tags --abbrev=0)
          release_name="GameHook-${{ matrix.target }}-$tag"
          echo "commithash is $commithash"
          echo "tag is $tag"
          echo "release_name is $release_name"

          echo "Building GameHook.WebAPI"
          echo "dotnet publish src/GameHook.WebAPI/GameHook.WebAPI.csproj -r ${{ matrix.target }} -c Release -o deploy /property:PublishSingleFile=true /property:Version=$tag /property:InformationalVersion=$tag+$commithash"
          dotnet publish src/GameHook.WebAPI/GameHook.WebAPI.csproj -r ${{ matrix.target }} -c Release -o deploy /property:PublishSingleFile=true /property:Version=$tag /property:InformationalVersion=$tag+$commithash

          if [ "${{ matrix.kind }}" == "windows" ]; then
            echo "Building GameHook.WPF"

            echo "dotnet publish src/GameHook.WPF/GameHook.WPF.csproj -r ${{ matrix.target }} -c Release -o deploy /property:PublishSingleFile=true /property:Version=$tag /property:InformationalVersion=$tag+$commithash"
            dotnet publish src/GameHook.WPF/GameHook.WPF.csproj -r ${{ matrix.target }} -c Release -o deploy /property:PublishSingleFile=true /property:Version=$tag /property:InformationalVersion=$tag+$commithash
          fi

          # Rename binaries.
          if [ "${{ matrix.kind }}" == "windows" ]; then
            cp ./deploy/GameHook.WPF.exe ./deploy/GameHook.exe
            cp ./deploy/GameHook.WebAPI.exe ./deploy/GameHook.Console.exe

            7z a -tzip "${release_name}.zip" "./deploy/GameHook.exe"
            7z a -tzip "${release_name}-console-only.zip" "./deploy/GameHook.Console.exe"
          else
            chmod +x ./deploy/GameHook.WebAPI
            cp ./deploy/GameHook.WebAPI ./deploy/GameHook

            cd ./deploy/ && tar czvf "./../${release_name}.tar.gz" GameHook && cd -
          fi

      - name: Upload Release Assets
        uses: octokit/request-action@v2.x
        with:
          route: POST /repos/:owner/:repo/releases/:release_id/assets
          release_id: ${{ needs.create-release.outputs.release_id }}
          headers: |
            Authorization: "token ${{ secrets.GITHUB_TOKEN }}"
            Content-Type: "application/zip"
          args: |
            - name: "GameHook-${{ matrix.target }}-$tag.zip"
              path: "./${{ release_name }}.zip"

            - name: "GameHook-${{ matrix.target }}-$tag.tar.gz"
              path: "./${{ release_name }}.tar.gz"

            - name: "GameHook.exe"
              path: "./deploy/GameHook.exe"

  notify:
    name: Notify Users
    runs-on: ubuntu-latest
    needs: upload-binaries
    steps:
      - name: Discord notification
        env:
          DISCORD_WEBHOOK: ${{ secrets.DISCORD_APP_UPDATES_WEBHOOK }}
        uses: Ilshidur/action-discord@master
        with:
          args: 'A new version of GameHook has been released. Version ${{ github.event.release.tag_name }} is now available. <https://github.com/gamehook-io/gamehook/releases/tag/${{ github.event.release.tag_name }}>'